/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Category;
import hr.algebra.model.Image;
import hr.algebra.model.Person;
import hr.algebra.model.Photographer;
import hr.algebra.model.Writer;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.CategoryTableModel;
import hr.algebra.view.model.PhotographerTableModel;
import hr.algebra.view.model.WriterTableModel;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.text.JTextComponent;

/**
 *
 * @author bubif
 */
public class EditOtherEntitiesPanel extends javax.swing.JPanel {

    /**
     * Creates new form EditFilmsPanel
     */
    public EditOtherEntitiesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlCategory = new javax.swing.JPanel();
        tfCategoryName = new javax.swing.JTextField();
        lbCategoryNameError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbCategories = new javax.swing.JTable();
        btnUpdateCategory = new javax.swing.JButton();
        btnAddCategory = new javax.swing.JButton();
        btnDeleteCategory = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        pnlPhotographer = new javax.swing.JPanel();
        tfPhotographerFirstName = new javax.swing.JTextField();
        lbPhotographerFirstNameError = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbPhotographers = new javax.swing.JTable();
        btnUpdatePhotographer = new javax.swing.JButton();
        btnAddPhotographer = new javax.swing.JButton();
        btnDeletePhotographer = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        tfPhotographerLastName = new javax.swing.JTextField();
        lbPhotographerLastNameError = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pnlPhotographer1 = new javax.swing.JPanel();
        tfWriterFirstName = new javax.swing.JTextField();
        lbWriterFirstNameError = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbWriters = new javax.swing.JTable();
        btnUpdateWriter = new javax.swing.JButton();
        btnAddWriter = new javax.swing.JButton();
        btnDeleteWriter = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        tfWriterLastName = new javax.swing.JTextField();
        lbWriterLastNameError = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lbCategoryNameError.setForeground(new java.awt.Color(255, 0, 0));
        lbCategoryNameError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbCategoryNameError.setText("X");

        jLabel3.setText("Category name");

        tbCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbCategoriesMouseClicked(evt);
            }
        });
        tbCategories.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbCategoriesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbCategories);

        btnUpdateCategory.setText("Update");
        btnUpdateCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCategoryActionPerformed(evt);
            }
        });

        btnAddCategory.setText("Add");
        btnAddCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCategoryActionPerformed(evt);
            }
        });

        btnDeleteCategory.setText("Delete");
        btnDeleteCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCategoryActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Categories");

        javax.swing.GroupLayout pnlCategoryLayout = new javax.swing.GroupLayout(pnlCategory);
        pnlCategory.setLayout(pnlCategoryLayout);
        pnlCategoryLayout.setHorizontalGroup(
            pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCategoryLayout.createSequentialGroup()
                .addGroup(pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCategoryLayout.createSequentialGroup()
                        .addGroup(pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCategoryLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(pnlCategoryLayout.createSequentialGroup()
                                        .addComponent(btnAddCategory)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnUpdateCategory)
                                        .addGap(48, 48, 48)
                                        .addComponent(btnDeleteCategory))
                                    .addGroup(pnlCategoryLayout.createSequentialGroup()
                                        .addGap(95, 95, 95)
                                        .addComponent(jLabel1)
                                        .addGap(112, 112, 112)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCategoryLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbCategoryNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlCategoryLayout.setVerticalGroup(
            pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCategoryLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCategoryNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddCategory)
                    .addComponent(btnDeleteCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateCategory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lbPhotographerFirstNameError.setForeground(new java.awt.Color(255, 0, 0));
        lbPhotographerFirstNameError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPhotographerFirstNameError.setText("X");

        jLabel4.setText("First name");

        tbPhotographers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbPhotographers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPhotographersMouseClicked(evt);
            }
        });
        tbPhotographers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbPhotographersKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbPhotographers);

        btnUpdatePhotographer.setText("Update");
        btnUpdatePhotographer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePhotographerActionPerformed(evt);
            }
        });

        btnAddPhotographer.setText("Add");
        btnAddPhotographer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPhotographerActionPerformed(evt);
            }
        });

        btnDeletePhotographer.setText("Delete");
        btnDeletePhotographer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePhotographerActionPerformed(evt);
            }
        });

        jLabel5.setText("Last name");

        lbPhotographerLastNameError.setForeground(new java.awt.Color(255, 0, 0));
        lbPhotographerLastNameError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPhotographerLastNameError.setText("X");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Photographer");

        javax.swing.GroupLayout pnlPhotographerLayout = new javax.swing.GroupLayout(pnlPhotographer);
        pnlPhotographer.setLayout(pnlPhotographerLayout);
        pnlPhotographerLayout.setHorizontalGroup(
            pnlPhotographerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPhotographerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPhotographerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlPhotographerLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPhotographerLastName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbPhotographerLastNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPhotographerLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPhotographerFirstName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbPhotographerFirstNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPhotographerLayout.createSequentialGroup()
                        .addComponent(btnAddPhotographer)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdatePhotographer)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeletePhotographer)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPhotographerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(125, 125, 125))
        );
        pnlPhotographerLayout.setVerticalGroup(
            pnlPhotographerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPhotographerLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlPhotographerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPhotographerFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPhotographerFirstNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPhotographerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPhotographerLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPhotographerLastNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPhotographerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdatePhotographer)
                    .addComponent(btnAddPhotographer)
                    .addComponent(btnDeletePhotographer, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lbWriterFirstNameError.setForeground(new java.awt.Color(255, 0, 0));
        lbWriterFirstNameError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbWriterFirstNameError.setText("X");

        jLabel6.setText("First name");

        tbWriters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbWriters.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbWritersMouseClicked(evt);
            }
        });
        tbWriters.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbWritersKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tbWriters);

        btnUpdateWriter.setText("Update");
        btnUpdateWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateWriterActionPerformed(evt);
            }
        });

        btnAddWriter.setText("Add");
        btnAddWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddWriterActionPerformed(evt);
            }
        });

        btnDeleteWriter.setText("Delete");
        btnDeleteWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteWriterActionPerformed(evt);
            }
        });

        jLabel7.setText("Last name");

        lbWriterLastNameError.setForeground(new java.awt.Color(255, 0, 0));
        lbWriterLastNameError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbWriterLastNameError.setText("X");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel8.setText("Writer");

        javax.swing.GroupLayout pnlPhotographer1Layout = new javax.swing.GroupLayout(pnlPhotographer1);
        pnlPhotographer1.setLayout(pnlPhotographer1Layout);
        pnlPhotographer1Layout.setHorizontalGroup(
            pnlPhotographer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPhotographer1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPhotographer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlPhotographer1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfWriterLastName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbWriterLastNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPhotographer1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfWriterFirstName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbWriterFirstNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPhotographer1Layout.createSequentialGroup()
                        .addComponent(btnAddWriter)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateWriter)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteWriter)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPhotographer1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(157, 157, 157))
        );
        pnlPhotographer1Layout.setVerticalGroup(
            pnlPhotographer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPhotographer1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(pnlPhotographer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfWriterFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbWriterFirstNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPhotographer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfWriterLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbWriterLastNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPhotographer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateWriter)
                    .addComponent(btnAddWriter)
                    .addComponent(btnDeleteWriter, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlPhotographer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlPhotographer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlPhotographer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlPhotographer1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try {
            init();
        } catch (Exception ex) {
            Logger.getLogger(EditOtherEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formComponentShown

    private void btnAddCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCategoryActionPerformed
        if (!categoryFormValid()) {
            return;
        }
        
        try {
            
            
            Category category = new Category(
                tfCategoryName.getText().trim()
            );
            
            repository.createCategory(category);
            categoryModel.setCategories(repository.selectCategories());
            
            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddCategoryActionPerformed

    private void btnUpdateCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCategoryActionPerformed
        if (currentSelectedCategory == null) {
            MessageUtils.showInformationMessage("INFO", "Please select");
        }
        if (!categoryFormValid()) {
            return;
        }
        
        try {
            

            currentSelectedCategory.setName(tfCategoryName.getText().trim());


            
            repository.updateCategory(currentSelectedCategory.getId(), currentSelectedCategory);
            
            
            categoryModel.setCategories(repository.selectCategories());
            
            clearForm();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnUpdateCategoryActionPerformed

    private void btnDeleteCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCategoryActionPerformed
        if (currentSelectedCategory == null) {
            MessageUtils.showInformationMessage("INFO", "Please select");
        }
        
        try {
            
            repository.deleteCategory(currentSelectedCategory.getId());

            categoryModel.setCategories(repository.selectCategories());
            
            clearForm();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnDeleteCategoryActionPerformed

    private void tbCategoriesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbCategoriesKeyReleased
        selectCategory();
    }//GEN-LAST:event_tbCategoriesKeyReleased

    private void tbCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbCategoriesMouseClicked
        selectCategory();
    }//GEN-LAST:event_tbCategoriesMouseClicked

    private void tbPhotographersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPhotographersMouseClicked
        selectPhotographer();
    }//GEN-LAST:event_tbPhotographersMouseClicked

    private void tbPhotographersKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPhotographersKeyReleased
        selectPhotographer();
    }//GEN-LAST:event_tbPhotographersKeyReleased

    private void btnUpdatePhotographerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePhotographerActionPerformed
        if (currentSelectedPhotographer == null) {
            MessageUtils.showInformationMessage("INFO", "Please select");
        }
        if (!photographerFormValid()) {
            return;
        }
        
        try {
            
            currentSelectedPhotographer.setFirstName(tfPhotographerFirstName.getText().trim());
            currentSelectedPhotographer.setLastName(tfPhotographerLastName.getText().trim());

            repository.updatePhotographer(currentSelectedPhotographer.getId(), currentSelectedPhotographer);
            
            
            photographerModel.setPhotographers(repository.selectPhotographers());
            
            clearForm();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnUpdatePhotographerActionPerformed

    private void btnAddPhotographerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPhotographerActionPerformed
        if (!photographerFormValid()) {
            return;
        }
        
        try {
            
            
            Photographer photographer = new Photographer(
                tfPhotographerFirstName.getText().trim(),
                tfPhotographerLastName.getText().trim()
            );
            
            repository.createPhotographer(photographer);
            photographerModel.setPhotographers(repository.selectPhotographers());
            
            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddPhotographerActionPerformed

    private void btnDeletePhotographerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePhotographerActionPerformed
        if (currentSelectedPhotographer == null) {
            MessageUtils.showInformationMessage("INFO", "Please select");
        }
        
        try {
            
            repository.deletePhotographer(currentSelectedPhotographer.getId());

            photographerModel.setPhotographers(repository.selectPhotographers());
            
            clearForm();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnDeletePhotographerActionPerformed

    private void tbWritersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbWritersMouseClicked
        selectWriter();
    }//GEN-LAST:event_tbWritersMouseClicked

    private void tbWritersKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbWritersKeyReleased
        selectWriter();
    }//GEN-LAST:event_tbWritersKeyReleased

    private void btnUpdateWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateWriterActionPerformed
        if (currentSelectedWriter == null) {
            MessageUtils.showInformationMessage("INFO", "Please select");
        }
        if (!writerFormValid()) {
            return;
        }
        
        try {
            
            currentSelectedWriter.setFirstName(tfWriterFirstName.getText().trim());
            currentSelectedWriter.setLastName(tfWriterLastName.getText().trim());

            repository.updateWriter(currentSelectedWriter.getId(), currentSelectedWriter);
            
            
            writerModel.setWriters(repository.selectWriters());
            
            clearForm();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnUpdateWriterActionPerformed

    private void btnAddWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddWriterActionPerformed
        if (!writerFormValid()) {
            return;
        }
        
        try {
            
            
            Writer writer = new Writer(
                tfWriterFirstName.getText().trim(),
                tfWriterLastName.getText().trim()
            );
            
            repository.createWriter(writer);
            writerModel.setWriters(repository.selectWriters());
            
            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddWriterActionPerformed

    private void btnDeleteWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteWriterActionPerformed
        if (currentSelectedWriter == null) {
            MessageUtils.showInformationMessage("INFO", "Please select");
        }
        
        try {
            
            repository.deleteWriter(currentSelectedWriter.getId());

            writerModel.setWriters(repository.selectWriters());
            
            clearForm();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnDeleteWriterActionPerformed

    private void init() throws Exception {
        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                initCategoryValidation();
                initPhotographerValidation();
                initWriterValidation();
                hideErrors();
                disableUpdateDelete();
                initRepository();
                initCategoryTable();
                initPhotographerTable();
                initWriterTable();
                handleDisabledButtons();
                return null;
            }

            @Override
            protected void done() {
                try {
                    get(); // Check for exceptions
                    // Update UI after loading
                    SwingUtilities.invokeLater(() -> {
                        tbCategories.setModel(categoryModel);
                        tbCategories.revalidate();
                    });
                } catch (Exception ex) {
                    Logger.getLogger(EditOtherEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    MessageUtils.showErrorMessage("Error", "Failed to load data");
                }
            }
        }.execute();
    }
    
        
    private List<JTextComponent> categoryValidationFields;
    private List<JLabel> categoryErrorLabels;
    
    private List<JTextComponent> photographerValidationFields;
    private List<JLabel> photographerErrorLabels;
    
    private List<JTextComponent> writerValidationFields;
    private List<JLabel> writerErrorLabels;
    
    
    
    private Repository repository;
    
    private CategoryTableModel categoryModel;
    private PhotographerTableModel photographerModel;
    private WriterTableModel writerModel;

    private Category currentSelectedCategory;
    private Writer currentSelectedWriter;
    private Photographer currentSelectedPhotographer;
    
    
    private void initCategoryValidation() {
        categoryValidationFields = Arrays.asList(tfCategoryName
        );
        categoryErrorLabels = Arrays.asList(lbCategoryNameError
        );
    }
    
    private void initPhotographerValidation() {
        photographerValidationFields = Arrays.asList(
                tfPhotographerFirstName,
                tfPhotographerLastName
        );
        photographerErrorLabels = Arrays.asList(
                lbPhotographerFirstNameError,
                lbPhotographerLastNameError
        );
    }
    
    private void initWriterValidation() {
        writerValidationFields = Arrays.asList(
                tfWriterFirstName,
                tfWriterLastName
        );
        writerErrorLabels = Arrays.asList(
                lbWriterFirstNameError,
                lbWriterLastNameError
        );
    }

    private void hideErrors() {
        categoryErrorLabels.forEach(e -> e.setVisible(false));
        photographerErrorLabels.forEach(e -> e.setVisible(false));
        writerErrorLabels.forEach(e -> e.setVisible(false));
    }
    
    private boolean categoryFormValid() {
            hideErrors();
            boolean ok = true;

            for (int i = 0; i < categoryValidationFields.size(); i++) {
                    ok &= !categoryValidationFields.get(i).getText().trim().isEmpty();
                    categoryErrorLabels.get(i).setVisible(categoryValidationFields.get(i).getText().trim().isEmpty());

               
                    if ("DATE".equals(categoryValidationFields.get(i).getName())) {
                        try {
                        LocalDateTime.parse(categoryValidationFields.get(i).getText().trim(),
                                Image.DATE_FORMATTER
                        );
                         }
                        catch (Exception e) {
                            ok = false;
                            categoryErrorLabels.get(i).setVisible(true);
                        }
                        
                   
                } 
                    
            }
            return ok;
    }
    
    private boolean photographerFormValid() {
            hideErrors();
            boolean ok = true;

            for (int i = 0; i < photographerValidationFields.size(); i++) {
                    ok &= !photographerValidationFields.get(i).getText().trim().isEmpty();
                    photographerErrorLabels.get(i).setVisible(photographerValidationFields.get(i).getText().trim().isEmpty());

               
                    if ("DATE".equals(photographerValidationFields.get(i).getName())) {
                        try {
                        LocalDateTime.parse(photographerValidationFields.get(i).getText().trim(),
                                Image.DATE_FORMATTER
                        );
                         }
                        catch (Exception e) {
                            ok = false;
                            photographerErrorLabels.get(i).setVisible(true);
                        }
                        
                   
                } 
                    
            }
            return ok;
    }


    private void clearForm() {
            hideErrors();
            categoryValidationFields.forEach(e -> e.setText(""));
            photographerValidationFields.forEach(e -> e.setText(""));
            writerValidationFields.forEach(e -> e.setText(""));
            currentSelectedCategory = null;
            currentSelectedPhotographer = null;
            currentSelectedWriter = null;
            btnUpdateCategory.setEnabled(false);
            btnDeleteCategory.setEnabled(false);
            btnUpdatePhotographer.setEnabled(false);
            btnDeletePhotographer.setEnabled(false);
            btnUpdateWriter.setEnabled(false);
            btnDeleteWriter.setEnabled(false);
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCategory;
    private javax.swing.JButton btnAddPhotographer;
    private javax.swing.JButton btnAddWriter;
    private javax.swing.JButton btnDeleteCategory;
    private javax.swing.JButton btnDeletePhotographer;
    private javax.swing.JButton btnDeleteWriter;
    private javax.swing.JButton btnUpdateCategory;
    private javax.swing.JButton btnUpdatePhotographer;
    private javax.swing.JButton btnUpdateWriter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbCategoryNameError;
    private javax.swing.JLabel lbPhotographerFirstNameError;
    private javax.swing.JLabel lbPhotographerLastNameError;
    private javax.swing.JLabel lbWriterFirstNameError;
    private javax.swing.JLabel lbWriterLastNameError;
    private javax.swing.JPanel pnlCategory;
    private javax.swing.JPanel pnlPhotographer;
    private javax.swing.JPanel pnlPhotographer1;
    private javax.swing.JTable tbCategories;
    private javax.swing.JTable tbPhotographers;
    private javax.swing.JTable tbWriters;
    private javax.swing.JTextField tfCategoryName;
    private javax.swing.JTextField tfPhotographerFirstName;
    private javax.swing.JTextField tfPhotographerLastName;
    private javax.swing.JTextField tfWriterFirstName;
    private javax.swing.JTextField tfWriterLastName;
    // End of variables declaration//GEN-END:variables

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }
    
    private void handleDisabledButtons() {
        tbCategories.getSelectionModel().addListSelectionListener(e -> {
            boolean rowSelected = tbCategories.getSelectedRow() != -1 && !e.getValueIsAdjusting();
            btnUpdateCategory.setEnabled(rowSelected);
            btnDeleteCategory.setEnabled(rowSelected);
        });
        
        tbPhotographers.getSelectionModel().addListSelectionListener(e -> {
            boolean rowSelected = tbPhotographers.getSelectedRow() != -1 && !e.getValueIsAdjusting();
            btnUpdatePhotographer.setEnabled(rowSelected);
            btnDeletePhotographer.setEnabled(rowSelected);
        });
        
        tbWriters.getSelectionModel().addListSelectionListener(e -> {
            boolean rowSelected = tbWriters.getSelectedRow() != -1 && !e.getValueIsAdjusting();
            btnUpdateWriter.setEnabled(rowSelected);
            btnDeleteWriter.setEnabled(rowSelected);
        });
    }

    private void initCategoryTable() throws Exception {
        List<Category> categories = repository.selectCategories();
        categoryModel = new CategoryTableModel(categories);

        SwingUtilities.invokeLater(() -> {
            tbCategories.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tbCategories.setAutoCreateRowSorter(true);
            tbCategories.setRowHeight(25);
            tbCategories.setModel(categoryModel);
        });
    }
    
    private void initPhotographerTable() throws Exception {
        List<Photographer> photographers = repository.selectPhotographers();
        photographerModel = new PhotographerTableModel(photographers);

        SwingUtilities.invokeLater(() -> {
            tbPhotographers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tbPhotographers.setAutoCreateRowSorter(true);
            tbPhotographers.setRowHeight(25);
            tbPhotographers.setModel(photographerModel);
        });
    }

    private void initWriterTable() throws Exception {
        List<Writer> writers = repository.selectWriters();
        writerModel = new WriterTableModel(writers);

        SwingUtilities.invokeLater(() -> {
            tbWriters.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tbWriters.setAutoCreateRowSorter(true);
            tbWriters.setRowHeight(25);
            tbWriters.setModel(writerModel);
        });
    }

    private void selectCategory() {
        int selectedRow = tbCategories.getSelectedRow();
        int rowIndex = tbCategories.convertRowIndexToModel(selectedRow);
        int id = (int) categoryModel.getValueAt(rowIndex, 0);

        new SwingWorker<Category, Void>() {
            @Override
            protected Category doInBackground() throws Exception {
                return repository.selectCategory(id).orElseThrow();
            }

            @Override
            protected void done() {
                try {
                    Category category = get();
                    currentSelectedCategory = category;
                    SwingUtilities.invokeLater(() -> fillCategoryForm(currentSelectedCategory));
                } catch (Exception e) {
                    MessageUtils.showErrorMessage("Error", "Failed to load image details");
                }
            }
        }.execute();
    }

    private void fillCategoryForm(Category category) {
        tfCategoryName.setText(category.getName());
    }
    
    private void fillPhotographerForm(Photographer photographer) {
        tfPhotographerFirstName.setText(photographer.getFirstName());
        tfPhotographerLastName.setText(photographer.getLastName());
    }
    
    private void fillWriterForm(Writer writer) {
        tfWriterFirstName.setText(writer.getFirstName());
        tfWriterLastName.setText(writer.getLastName());
    }

    private void selectPhotographer() {
        int selectedRow = tbPhotographers.getSelectedRow();
        int rowIndex = tbPhotographers.convertRowIndexToModel(selectedRow);
        int id = (int) photographerModel.getValueAt(rowIndex, 0);

        new SwingWorker<Photographer, Void>() {
            @Override
            protected Photographer doInBackground() throws Exception {
                return repository.selectPhotographer(id).orElseThrow();
            }

            @Override
            protected void done() {
                try {
                    Photographer photographer = get();
                    currentSelectedPhotographer = photographer;
                    SwingUtilities.invokeLater(() -> fillPhotographerForm(currentSelectedPhotographer));
                } catch (Exception e) {
                    MessageUtils.showErrorMessage("Error", "Failed to load image details");
                }
            }
        }.execute();    
    }
    
    private void disableUpdateDelete() {
        btnUpdateCategory.setEnabled(false);
        btnDeleteCategory.setEnabled(false);
        btnUpdatePhotographer.setEnabled(false);
        btnDeletePhotographer.setEnabled(false);
        btnUpdateWriter.setEnabled(false);
        btnDeleteWriter.setEnabled(false);
    }

    private void selectWriter() {
        int selectedRow = tbWriters.getSelectedRow();
        int rowIndex = tbWriters.convertRowIndexToModel(selectedRow);
        int id = (int) writerModel.getValueAt(rowIndex, 0);

        new SwingWorker<Writer, Void>() {
            @Override
            protected Writer doInBackground() throws Exception {
                return repository.selectWriter(id).orElseThrow();
            }

            @Override
            protected void done() {
                try {
                    Writer writer = get();
                    currentSelectedWriter = writer;
                    SwingUtilities.invokeLater(() -> fillWriterForm(currentSelectedWriter));
                } catch (Exception e) {
                    MessageUtils.showErrorMessage("Error", "Failed to load image details");
                }
            }
        }.execute(); 
    }

    private boolean writerFormValid() {
        hideErrors();
        boolean ok = true;

        for (int i = 0; i < writerValidationFields.size(); i++) {
                ok &= !writerValidationFields.get(i).getText().trim().isEmpty();
                writerErrorLabels.get(i).setVisible(writerValidationFields.get(i).getText().trim().isEmpty());


                if ("DATE".equals(writerValidationFields.get(i).getName())) {
                    try {
                    LocalDateTime.parse(writerValidationFields.get(i).getText().trim(),
                            Image.DATE_FORMATTER
                    );
                     }
                    catch (Exception e) {
                        ok = false;
                        writerErrorLabels.get(i).setVisible(true);
                    }


            } 

        }
        return ok;        
    }
}
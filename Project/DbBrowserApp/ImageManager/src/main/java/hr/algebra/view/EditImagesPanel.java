/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Image;
import hr.algebra.model.ImageArchive;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.ImageTableModel;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.text.JTextComponent;

/**
 *
 * @author bubif
 */
public class EditImagesPanel extends javax.swing.JPanel {
    
    
    private static final String FILENAME = "src/main/resources/paperarchive.xml";

    /**
     * Creates new form EditFilmsPanel
     */
    public EditImagesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbImages = new javax.swing.JTable();
        lbIcon = new javax.swing.JLabel();
        btnChoose = new javax.swing.JButton();
        tfPicturePath = new javax.swing.JTextField();
        lbTitleError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lbPathError = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lbLinkError = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lbDescError = new javax.swing.JLabel();
        lbDateError = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        tfPubDate = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDesc = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbSelectEntitiyToSet = new javax.swing.JComboBox<>();
        tfSetEntityId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnSetEntitiy = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnSaveToXml = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbImages.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbImages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbImagesMouseClicked(evt);
            }
        });
        tbImages.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbImagesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbImages);

        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        tfPicturePath.setEditable(false);

        lbTitleError.setForeground(new java.awt.Color(255, 0, 0));
        lbTitleError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTitleError.setText("X");

        jLabel3.setText("Title");

        lbPathError.setForeground(new java.awt.Color(255, 0, 0));
        lbPathError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPathError.setText("X");

        jLabel5.setText("Link");

        lbLinkError.setForeground(new java.awt.Color(255, 0, 0));
        lbLinkError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbLinkError.setText("X");

        jLabel7.setText("Description");

        lbDescError.setForeground(new java.awt.Color(255, 0, 0));
        lbDescError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbDescError.setText("X");

        lbDateError.setForeground(new java.awt.Color(255, 0, 0));
        lbDateError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbDateError.setText("X");

        jLabel10.setText("Published Date");

        tfPubDate.setName("DATE"); // NOI18N

        taDesc.setColumns(20);
        taDesc.setLineWrap(true);
        taDesc.setRows(5);
        jScrollPane2.setViewportView(taDesc);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setToolTipText("Set Entity Relation");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Set relation to entity");

        jLabel2.setText("Entity ID");

        btnSetEntitiy.setText("Set");
        btnSetEntitiy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetEntitiyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(cbSelectEntitiyToSet, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSetEntityId, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSetEntitiy)
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(119, 119, 119))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSelectEntitiyToSet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSetEntityId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSetEntitiy)
                    .addComponent(jLabel2))
                .addGap(28, 28, 28))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSaveToXml.setText("Save images to XML");
        btnSaveToXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveToXmlActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(btnSaveToXml, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelete)
                .addGap(44, 44, 44))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSaveToXml, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lbDescError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(lbPathError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfPicturePath, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnChoose)
                    .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPathError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbDescError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
	if (file == null) {
		return;
	}
	tfPicturePath.setText(file.getAbsolutePath());
	setIcon(lbIcon, file);
    }//GEN-LAST:event_btnChooseActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try {
            init();
        } catch (Exception ex) {
            Logger.getLogger(EditImagesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formComponentShown

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (!formValid()) {
            return;
        }
        
        try {
            
            String localPath = uploadPicture();
            
            Image image = new Image(
                tfTitle.getText().trim(),
                tfLink.getText().trim(),
                taDesc.getText().trim(),
                localPath,
                LocalDateTime.parse(tfPubDate.getText().trim(),
                    Image.DATE_FORMATTER
                )
            );
            
            repository.createImage(image);
            model.setImages(repository.selectImages());
            
            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (currentSelectedImage == null) {
            MessageUtils.showInformationMessage("INFO", "Please select");
        }
        if (!formValid()) {
            return;
        }
        
        try {
            
            if (!tfPicturePath.getText().equals(currentSelectedImage.getPicturePath())) {
                if (Files.exists(Paths.get(currentSelectedImage.getPicturePath()))) {
                    Files.deleteIfExists(Paths.get(currentSelectedImage.getPicturePath()));
                }
                
                String localPath = uploadPicture();
                currentSelectedImage.setPicturePath(localPath);
            } 
            currentSelectedImage.setTitle(tfTitle.getText().trim());
            currentSelectedImage.setLink(tfLink.getText().trim());
            currentSelectedImage.setPublishedDate(LocalDateTime.parse(tfPubDate.getText().trim(),
                        Image.DATE_FORMATTER
                    ));
            currentSelectedImage.setDescription(taDesc.getText().trim());

            
            repository.updateImage(currentSelectedImage.getId(), currentSelectedImage);
            
            
            model.setImages(repository.selectImages());
            
            clearForm();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (currentSelectedImage == null) {
            MessageUtils.showInformationMessage("INFO", "Please select");
        }
        
        try {
            

            if (Files.exists(Paths.get(currentSelectedImage.getPicturePath()))) {
                Files.deleteIfExists(Paths.get(currentSelectedImage.getPicturePath()));
            }


            
            repository.deleteImage(currentSelectedImage.getId());
            
            
            model.setImages(repository.selectImages());
            
            clearForm();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tbImagesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbImagesKeyReleased
        selectImage();
    }//GEN-LAST:event_tbImagesKeyReleased

    private void tbImagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbImagesMouseClicked
        selectImage();
    }//GEN-LAST:event_tbImagesMouseClicked

    private void btnSaveToXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveToXmlActionPerformed
        try {
            JAXBUtils.save(new ImageArchive(repository.selectImages()), FILENAME);
        } catch (Exception ex) {
            Logger.getLogger(EditImagesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveToXmlActionPerformed

    private void btnSetEntitiyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetEntitiyActionPerformed
        setRelationToCurrentImage();
    }//GEN-LAST:event_btnSetEntitiyActionPerformed

    private void init() throws Exception {
        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                initValidation();
                hideErrors();
                btnUpdate.setEnabled(false);
                btnDelete.setEnabled(false);
                btnSetEntitiy.setEnabled(false);
                initRepository();
                initTable();
                initComboBoxRelations();
                disableButtons();
                return null;
            }

            @Override
            protected void done() {
                try {
                    get(); // Check for exceptions
                    // Update UI after loading
                    SwingUtilities.invokeLater(() -> {
                        tbImages.setModel(model);
                        tbImages.revalidate();
                    });
                } catch (Exception ex) {
                    Logger.getLogger(EditImagesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    MessageUtils.showErrorMessage("Error", "Failed to load data");
                }
            }
        }.execute();
    }
    
        
    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    
    private Repository repository;
    private ImageTableModel model;
    
    private Image currentSelectedImage;
    
    
    private void initValidation() {
        validationFields = Arrays.asList(
            tfLink,
            tfPicturePath,
            tfPubDate,
            tfTitle,
            taDesc

        );
        errorLabels = Arrays.asList(
            lbLinkError,
            lbPathError,
            lbDateError,
            lbTitleError,
            lbDescError
        );
    }

    private void hideErrors() {
        errorLabels.forEach(e -> e.setVisible(false));
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(EditImagesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }
    
    private boolean formValid() {
            hideErrors();
            boolean ok = true;

            for (int i = 0; i < validationFields.size(); i++) {
                    ok &= !validationFields.get(i).getText().trim().isEmpty();
                    errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());

               
                    if ("DATE".equals(validationFields.get(i).getName())) {
                        try {
                        LocalDateTime.parse(validationFields.get(i).getText().trim(),
                                Image.DATE_FORMATTER
                        );
                         }
                        catch (Exception e) {
                            ok = false;
                            errorLabels.get(i).setVisible(true);
                        }
                        
                   
                } 
                    
            }
            return ok;
    }


    private void clearForm() {
            hideErrors();
            validationFields.forEach(e -> e.setText(""));
        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); 
            currentSelectedImage = null;
            btnUpdate.setEnabled(false);
            btnSetEntitiy.setEnabled(false);
            btnDelete.setEnabled(false);
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSaveToXml;
    private javax.swing.JButton btnSetEntitiy;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbSelectEntitiyToSet;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbDateError;
    private javax.swing.JLabel lbDescError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbLinkError;
    private javax.swing.JLabel lbPathError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JTextArea taDesc;
    private javax.swing.JTable tbImages;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPubDate;
    private javax.swing.JTextField tfSetEntityId;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }
    
    private void disableButtons() {
        tbImages.getSelectionModel().addListSelectionListener(e -> {
        // Only enable if a valid row is selected and the event is not adjusting
        boolean rowSelected = tbImages.getSelectedRow() != -1 && !e.getValueIsAdjusting();
        btnUpdate.setEnabled(rowSelected);
        btnDelete.setEnabled(rowSelected);
        btnSetEntitiy.setEnabled(rowSelected);
        });
    }

    private void initTable() throws Exception {
        List<Image> images = repository.selectImages();
        model = new ImageTableModel(images);

        SwingUtilities.invokeLater(() -> {
            tbImages.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tbImages.setAutoCreateRowSorter(true);
            tbImages.setRowHeight(25);
            tbImages.setModel(model);
        });
    }

    private String uploadPicture() throws IOException {
        String source = tfPicturePath.getText().trim();
        
        String ext = source.substring(source.lastIndexOf("."));
        String name = UUID.randomUUID().toString() + ext;
        
        String destination = "assets" + File.separator + name;
        
        FileUtils.copy(source, destination);
              
        
        return destination;
    }

    private void selectImage() {
        int selectedRow = tbImages.getSelectedRow();
        int rowIndex = tbImages.convertRowIndexToModel(selectedRow);
        int id = (int) model.getValueAt(rowIndex, 0);

        new SwingWorker<Image, Void>() {
            @Override
            protected Image doInBackground() throws Exception {
                return repository.selectImage(id).orElseThrow();
            }

            @Override
            protected void done() {
                try {
                    Image image = get();
                    currentSelectedImage = image;
                    SwingUtilities.invokeLater(() -> fillForm(currentSelectedImage));
                } catch (Exception e) {
                    MessageUtils.showErrorMessage("Error", "Failed to load image details");
                }
            }
        }.execute();
    }

    private void fillForm(Image image) {
        tfTitle.setText(image.getTitle());
        tfLink.setText(image.getLink());
        tfPicturePath.setText(image.getPicturePath());
        taDesc.setText(image.getDescription());
        tfPubDate.setText(image.getPublishedDate().format(Image.DATE_FORMATTER));
        
        setIcon(lbIcon, new File (
                image.getPicturePath()
        ));
    }
    private void initComboBoxRelations() {
        cbSelectEntitiyToSet.removeAllItems();
        cbSelectEntitiyToSet.addItem("PHOTOGRAPHER");
        cbSelectEntitiyToSet.addItem("WRITER");
        cbSelectEntitiyToSet.addItem("CATEGORY");
    }

    private void setRelationToCurrentImage() {
        if (currentSelectedImage == null) {
            MessageUtils.showInformationMessage("INFO", "Please select an image in the table first.");
            return;
        }
        String selectedType = (String) cbSelectEntitiyToSet.getSelectedItem();
        String idText = tfSetEntityId.getText().trim();
        
        try {
            int id = Integer.parseInt(idText);
            switch (selectedType) {
                case "PHOTOGRAPHER":
                    repository.setImagePhotographer(id, currentSelectedImage);
                    break;
                case "WRITER":
                    repository.setImageWriter(id, currentSelectedImage);
                    break;
                case "CATEGORY":
                    repository.setImageCategory(id, currentSelectedImage);
                    break;
                
            }
            MessageUtils.showInformationMessage("Success", "Relation set successfully.");
        } catch (NumberFormatException ex) {
            MessageUtils.showErrorMessage("Input Error", "Please enter a valid numeric ID.");
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Could not set relation: " + ex.getMessage());
        }
    }
}